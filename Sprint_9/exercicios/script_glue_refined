import sys
from awsglue.transforms import *
from awsglue.utils import getResolvedOptions
from pyspark.context import SparkContext
from awsglue.context import GlueContext
from awsglue.job import Job
from pyspark.sql import functions as Func
from pyspark.sql.functions import *
from awsglue.dynamicframe import DynamicFrame

## @params: [JOB_NAME]
args = getResolvedOptions(sys.argv, ['JOB_NAME', 'S3_INPUT_PATH', 'S3_TARGET_PATH'])

sc = SparkContext()
glueContext = GlueContext(sc)
spark = glueContext.spark_session
job = Job(glueContext)
job.init(args['JOB_NAME'], args)

target_path = args['S3_TARGET_PATH']
source_file = args['S3_INPUT_PATH']

df_spark = spark.read.format("parquet").load(source_file)

df_spark = df_spark.select('Id','Titulo','Popularidade','Lancamento','Nota','Votos','Orçamento','Receita','Duração')

df_spark = df_spark.select("*").where(Func.col("Lancamento").between("2008-01-01", "2023-12-31")).orderBy(Func.col("Lancamento"))

df_spark = df_spark.select("*").where(Func.col("Receita" and "Orçamento") != 0)

df_spark = df_spark.select("*").where(Func.col("Votos") > 2000)

df_spark = df_spark.withColumn("Vingadores", when(df_spark["Titulo"].contains("Avengers"), "Sim").otherwise("Não"))

df_spark.write.format("parquet").save(target_path)

## Nessa linha eu transformei em dynamicframe, mas não tinha necessidade. O Athena reconhece também DFspark no awsglue catalog
dynamicDF = DynamicFrame.fromDF(df_spark, glueContext,"dynamicDF")
glueContext.write_dynamic_frame.from_catalog(dynamicDF, database='analise', table_name='filmes2', transformation_ctx='transform')

job.commit()